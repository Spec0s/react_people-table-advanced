{"version":3,"sources":["utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PeopleTable.tsx","api.ts","components/PeoplePage.tsx","components/Navbar.tsx","App.tsx","index.tsx"],"names":["getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","to","search","PeopleFilters","setSearchParams","sex","get","query","centuries","getAll","className","cn","type","placeholder","onChange","e","queryValue","target","map","century","includes","filter","c","length","Loader","PeopleTable","people","slug","useParams","sort","order","personLink","name","foundPerson","find","person","tableName","toLowerCase","a","b","localeCompare","sortedPeople","born","died","fatherName","motherName","link","API_URL","wait","delay","Promise","resolve","setTimeout","getPeople","then","fetch","response","json","PeoplePage","useState","setPeople","peopleLoader","setPeopleLoader","error","setError","loadPeople","load","useEffect","peopleFiltered","filtered","some","Math","ceil","Number","Navbar","role","isActive","App","path","element","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.ae06d26f.chunk.js","sourcesContent":["export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import cn from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { SearchLink } from './SearchLink';\nimport { getSearchWith } from '../utils/searchHelper';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const centuriesValues = ['16', '17', '18', '19', '20'];\n  const sex = searchParams.get('sex');\n  const query = searchParams.get('query') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n\n  function handleQueryChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const queryValue = e.target.value;\n\n    setSearchParams(\n      getSearchWith(searchParams, { query: queryValue || null }),\n    );\n  }\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={cn({ 'is-active': !sex })}\n          params={{ sex: null }}\n        >\n          All\n        </SearchLink>\n        <SearchLink\n          className={cn({ 'is-active': sex === 'm' })}\n          params={{ sex: 'm' }}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          className={cn({ 'is-active': sex === 'f' })}\n          params={{ sex: 'f' }}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {centuriesValues.map(century => (\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                className={cn(\n                  'mr-1',\n                  'button',\n                  { 'is-info': centuries.includes(century) },\n                )}\n                params={{\n                  centuries: centuries.includes(century)\n                    ? centuries.filter(c => c !== century)\n                    : [...centuries, century],\n                }}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={cn(\n                'button',\n                'is-success',\n                { 'is-outlined': centuries.length },\n              )}\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{\n            sex: null,\n            query: null,\n            centuries: null,\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Link, useParams, useSearchParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { Person } from '../types';\nimport { SearchLink } from './SearchLink';\n\ntype Prop = {\n  people: Person[]\n};\n\nexport const PeopleTable:React.FC<Prop> = ({\n  people,\n}) => {\n  const [searchParams] = useSearchParams();\n  const tableSortingNames = ['Name', 'Sex', 'Born', 'Died'];\n  const { slug } = useParams();\n\n  const sort = searchParams.get('sort');\n  const order = searchParams.get('order');\n\n  const personLink = (name: string | null) => {\n    const foundPerson = people.find(person => person.name === name);\n\n    return foundPerson ? foundPerson.slug : null;\n  };\n\n  const sortedPeople = () => {\n    switch (true) {\n      case (sort && !order):\n        if (sort === 'born' || sort === 'died') {\n          return people.sort((a, b) => a[sort] - b[sort]);\n        }\n\n        if (sort === 'name' || sort === 'sex') {\n          return people.sort((a, b) => a[sort].localeCompare(b[sort]));\n        }\n\n        break;\n\n      case (sort && order === 'desc'):\n        if (sort === 'born' || sort === 'died') {\n          return people.sort((a, b) => b[sort] - a[sort]);\n        }\n\n        if (sort === 'name' || sort === 'sex') {\n          return people.sort((a, b) => b[sort].localeCompare(a[sort]));\n        }\n\n        break;\n      default: return people;\n    }\n\n    return people;\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {tableSortingNames.map(tableName => (\n            <th\n              key={tableName}\n            >\n              <span className=\"is-flex is-flex-wrap-nowrap\">\n                {tableName}\n                <SearchLink\n                  params={{\n                    sort: sort === tableName.toLowerCase() && order\n                      ? null\n                      : tableName.toLowerCase(),\n                    order: !order && sort === tableName.toLowerCase()\n                      ? 'desc'\n                      : null,\n                  }}\n                >\n                  <span className=\"icon\">\n                    <i\n                      className={cn(\n                        'fas',\n                        'fa-sort',\n                        {\n                          'fa-sort-up':\n                            sort === tableName.toLowerCase()\n                              && !order,\n                        },\n                        {\n                          'fa-sort-down':\n                            sort === tableName.toLowerCase()\n                              && order === 'desc',\n                        },\n                      )}\n                    />\n                  </span>\n                </SearchLink>\n              </span>\n            </th>\n          ))}\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {sortedPeople().map(({\n          name,\n          sex,\n          born,\n          died,\n          fatherName,\n          motherName,\n          slug: link,\n        }) => (\n          <tr\n            key={name}\n            data-cy=\"person\"\n            className={cn(\n              { 'has-background-warning': slug === link },\n            )}\n          >\n            <td>\n              <Link\n                to={`/people/${link}`}\n                className={cn(\n                  { 'has-text-danger': sex === 'f' },\n                )}\n              >\n                {name}\n              </Link>\n            </td>\n\n            <td>{sex}</td>\n            <td>{born}</td>\n            <td>{died}</td>\n            {personLink(motherName) ? (\n              <td>\n                <Link\n                  to={`/people/${personLink(motherName)}`}\n                  className=\"has-text-danger\"\n                >\n                  {motherName || '-'}\n                </Link>\n              </td>\n            ) : (\n              <td>\n                {motherName || (\n                  '-'\n                )}\n              </td>\n            )}\n            {personLink(fatherName) ? (\n              <td>\n                <Link\n                  to={`/people/${personLink(fatherName)}`}\n                >\n                  {fatherName || '-'}\n                </Link>\n              </td>\n            ) : (\n              <td>\n                {fatherName || (\n                  '-'\n                )}\n              </td>\n            )}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from './Loader';\nimport { PeopleTable } from './PeopleTable';\nimport { getPeople } from '../api';\nimport { Person } from '../types';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [peopleLoader, setPeopleLoader] = useState(true);\n  const [error, setError] = useState(false);\n  const [searchParams] = useSearchParams();\n  const sex = searchParams.get('sex') || '';\n  const query = searchParams.get('query') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n\n  const loadPeople = async () => {\n    try {\n      setError(false);\n      setPeopleLoader(true);\n      const load = await getPeople();\n\n      setPeople(load);\n    } catch {\n      setError(true);\n    }\n\n    setPeopleLoader(false);\n  };\n\n  useEffect(() => {\n    loadPeople();\n  }, []);\n\n  const noPeopleOnServer = () => {\n    return !people.length && !error && !peopleLoader;\n  };\n\n  const peopleFiltered = () => {\n    let filtered = [...people];\n\n    if (centuries.length) {\n      filtered = [\n        ...filtered.filter(\n          person => centuries.some(\n            century => {\n              return Math.ceil(person.born / 100)\n              === Number(century);\n            },\n          ),\n        ),\n      ];\n    }\n\n    if (query) {\n      filtered = [...filtered.filter(({\n        name,\n        fatherName,\n        motherName,\n      }) => (\n        name.toLowerCase().includes(query.toLowerCase())\n        || fatherName?.toLowerCase().includes(query.toLowerCase())\n        || motherName?.toLowerCase().includes(query.toLowerCase())\n      ))];\n    }\n\n    if (sex) {\n      filtered = [...filtered.filter(person => person.sex === sex)];\n    }\n\n    return filtered;\n  };\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n      <div className=\"block\">\n        {peopleLoader && (\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              <Loader />\n            </div>\n          </div>\n        )}\n\n        {!peopleLoader && (\n          <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters />\n            </div>\n\n            <div className=\"column\">\n              <div className=\"box table-container\">\n\n                {error && !peopleLoader && (\n                  <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                    Something went wrong\n                  </p>\n                )}\n\n                {noPeopleOnServer() && (\n                  <p data-cy=\"noPeopleMessage\">\n                    There are no people on the server\n                  </p>\n                )}\n\n                {peopleFiltered().length ? (\n                  <PeopleTable people={peopleFiltered()} />\n                ) : (\n                  <p>\n                    There are no people matching the current search criteria\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n\n      </div>\n    </>\n  );\n};\n","import { NavLink } from 'react-router-dom';\nimport cn from 'classnames';\n\nexport const Navbar:React.FC = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={({ isActive }) => (\n              cn(\n                'navbar-item',\n                { 'has-background-grey-lighter': isActive },\n              )\n            )}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            aria-current=\"page\"\n            className={({ isActive }) => (\n              cn(\n                'navbar-item',\n                { 'has-background-grey-lighter': isActive },\n              )\n            )}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import React from 'react';\nimport { Route, Routes } from 'react-router-dom';\nimport { PeoplePage } from './components/PeoplePage';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\n\nexport const App:React.FC = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route\n              path=\"/\"\n              element={\n                <h1 className=\"title\">Home Page</h1>\n              }\n            />\n            <Route\n              path=\"/people\"\n            >\n              <Route index element={<PeoplePage />} />\n              <Route path=\":slug\" element={<PeoplePage />} />\n            </Route>\n            <Route\n              path=\"*\"\n              element={\n                <h1 className=\"title\">Page not found</h1>\n              }\n            />\n          </Routes>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}